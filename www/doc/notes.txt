programming guidelines:


    # UI for one click (web-based) installers
    # installers install/update/monitor/activate/de-activate software, ie hosted service (hs) or software as a service (ss)
    # asset_type_id = hs or ss
    # code is going to use ss for all cases of hs or ss, because hs sounds like hf and looks like ns, which might increase 
    # errors and make code more difficult to read and debug.

    # A conspicuous alert when system needs user attention (contract expiring, service down etc)
    # Use: util_user_message  For example, see q-wiki/www/q-wiki.tcl 

    # use quotas with alerts
    # quota proc should be a scheduled proc. see ecommerce scheduled procs for example, that updates:
    # storage usage, memory usage and traffic tracking.
    # and another scheduled proc that handles log monitoring/ alarms
    # switchable, configurable automated log monitoring and alarms

    # billing - general invoicing utility for handling initial orders, recurring billing, and quota overages.
    # reseller service features

    # ticket tracker with built-in streamlining for outages/disrutions that deal with multiple/bulk sets of clients
    # social feedback mechanisms

    # asset object description. 
    # Every asset_id has a reference in the hf_assets table, including vhosts and services.
    # Each type may have a separate table containing additional properties.

    # asset_id, hf_id              - generic asset
    #       ->  service, ss_id     - service asset attached to no asset, or a generic asset
    # dc  dc_id                    - datacenter 
    #       ->  ss_id              - service asset attached to (with dependency primarily on) datacenter
    # hw  hw_id                    - hardware
    #       ->  ss_id              - service asset attached to (with dependency primarily on) hardware
    # vm  vm_id                    - virtual machine
    #       ->  ss_id              - service asset attached to (with dependency primarily on) virtual machine
    # vh  vh_id                    - virtual host
    #       ->  ss_id              - service asset attached to (with dependency primarily on) virtual host

    # ni, ip, os, ns are not assets, but attributes that can be assigned to assets.

    # objects can easily be passed to procs via an array and upvar
    #  array references don't work in sql, so these use ordered lists

    # These procs may be handy when manipulating the long lists of procedure parameters:
    # template::util::list_to_array $values_list array_name $keys_list
    # template::util::array_to_vars array_name
    # qf_lists_to_vars $vars_list $keys_list
    # list of values direct to variables:
    # lassign $values_list varName1 varName2.. varNameN
    # key_value_list [array get array_name]
    # keys_of_array_list [array names array_name]
    # array set array_name {key1 value1 key2 value2.. }




Separate code spaces for business logic, views, and low level utilities.
Don't write until something is needed.
Avoid conditionals. If they're needed, consider creating other procs.
If in doubt, throw it out.
constructor=view/object


# monitoring procs
# hf::monitor::do
# hf::monitor::read
# hf::monitor::trash
# hf::monitor::add
# hf::monitor::list

#   hf_monitor_configs_read   Read monitor configuration
#   hf_monitor_configs_write  Write monitor configuration

#   hf_monitor_update         Write an update to a log (this includes distribution curve info, ie time as delta-t)
#   hf_monitor_status         Read status of asset_id, defaults to most recent status (like read, just status number)

#   hf_monitor_statistics     Analyse most recent hf_monitor_update in context of distribution curve
#                             Returns distribution curve of most recent configuration (table hf_monitor_freq_dist_curves)
#                             Save an Analysis an hf_monitor_update (or FLAG ERROR)

#   hf_monitor_logs           Returns monitor_ids of logs indirectly associated with an asset (direct is 1:1 via asset properties)

#   hf_monitor_report         Returns a range of monitor history
#   hf_monitor_status_history  Returns a range of status history

#   hf_monitor_asset_of_id  Returns asset_id of monitor_id




# triggers are configured in hf_monitor_configs_read
# hf_monitor_alert_trigger (notifications and hf_log_create )
# hf_monitor_alerts_status



#  split into MVC components:
#  inputs/observations (model), actions (controller), and outputs/reports (view) sections


Rationalization on using scheduler instead of callbacks: If callbacks are interrupted, a progression will not be polled to pickup where left off if interrupted --and delays are not as easily detected in a callback system vs. a system forced to use a scheduling process.

Make a table showing representation between db ref and tcl object_arr(element) returned in
hf_nc_* procs ie possibly available to hfl_local_* procs when called.

Note about parameter priorityThreshold in monitoring. The default is 3. This allows all priority level 0,1, and 2 monitoring priorities to not be interrupted in schedule by a lower priority call that has been delayed for some time. Dynamic priority is priority - delay in seconds / interval_seconds. If Dynamic priority is below priorityThreshold, dynamic priority is set to priorityThreshold+1. 

create a refresh button (circle w/arrow) and a cancel button (red circle w light grey x)

make esrg-ex-N example pages for each content grouping type.

http://jimbobsquarepants.github.io/Responsive/

https://github.com/dfcb/extra-strength-responsive-grids

http://www.responsivegridsystem.com/

http://necolas.github.io/normalize.css/

status cols:
power/active  
 on/off/disabled/suspended/interrupted

disabled is an admin/system set state
a suspend/interrupt state converts to off after user turns off
a suspend/interrupt state reverts to suspend/interrupt if attempts at start/on are unsuccessful, needing user intervention (alert)
a disable state is not convertable by user 
an abandoned/timed-out suspend state converts to disabled after X days/weeks/months
archived are disabled
new are off/inactive
pre-new are off/inactive

activity feedback status:
face, light, linear graph or numeric index 0 = inactive, 10 = best relative performance

user buttons:

start/stop
archive, readme, help

face expression intensity from scott.. comic drawing book (get ref, give credit):
satisfaction , amusement, joy , laugh
concern, anxious, fear, terror
dejection, melancholy, sad, grief
alert, wonder, surprise, shock

General UI.

If a customer_id is not already chosen, Get customer_ids for user_id

If customer_ids > list_min, show pagination_bar of customers as links
if multiple customer_ids, show list of customers

Show first N items (monitors etc) needing most attention.

If customer_id is clicked, scope to customer_id and show all for customer_id (paginated)


